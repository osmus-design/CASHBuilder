# Импортируем необходимые библиотеки
from functions import count_days, other_fnc

# Объявляем переменные
target_accum, invest_value = 0.2, 0.2 # Коэффициент целевого накопления 0,2 (20%), инвестиции
target_accumulation_MIN = 0.1 # Коэффициент минимального целевого накопления 0,1 (10%)
wastes = {
    "проживание": 15000, # Плата за жильё, половина месячной стоимости
    "подарки близким": 0, # Расходы на подарки
    "коммунальные услуги": 0, # Коммунальные услуги
    "кредит/рассрочку": 0, # Месячный расход на кредиты/рассрочку. 
    "подписки": 700, # Общая сумма расходов на подписки 
    "питание/проезд в день": 1200 # Целевая минимальная сумма каждодневных расходов
}

# Реализуем функцию накопления капитала рабочего. Переменные объявляем в процессе

# Ручной ввод значения полученной зарплаты
print("Введите сумму Вашей зарплаты", end="")
income = other_fnc.ex_input()
# Заполнение словаря с затратами
wastes = other_fnc.dict_cont_write(wastes)

# Использование функции вычисления промежутка между датами, введенными пользователем
date_range = count_days.between()
# Записываем результаты выполнения функции в переменные.
base_expence_days, upper_expence_days = date_range

# Считаем общую сумму регулярных расходов за период
payment_for_period = wastes["питание/проезд в день"] * (base_expence_days + 2 * upper_expence_days)
# Считаем сумму денег оставшихся после вычета всех расходов из зп, кроме ежедневных за период.
profit = income - (wastes["проживание"] + wastes["кредит/рассрочку"] + wastes["коммунальные услуги"] + wastes["подарки близким"] + wastes["подписки"]) 
# Вычитаем сумму каждодневных расходов. Получаем чистую сумму доступных накоплений. Выводим на экран
capital = profit - payment_for_period

# Выводим расчеты на экран
print(f"""\n
Выполняю расчеты...
Общая сумма регулярных расходов за период: {payment_for_period}
Дни базовых трат: {base_expence_days}
Дни повышенных трат: {upper_expence_days}
С вычетом всех расходов остается: {capital}""")

# Выводим коэффициенты накоплений
print("Хочешь отложить: ", target_accum * 100, end="%")
print("\nИз них инвестировать: ", invest_value * 100, end="%\n\n")

# Расчет рекомендаций
# Находим значение целевого накопления по начальному тарифу
target_capital = (profit * target_accum)
# Находим значение минимального целевого накопления по начальному тарифу
target_capital_MIN = (profit * target_accumulation_MIN)
# Находим значение инвестиций
investment = (capital * invest_value)
# Рекомендованный расход для получения 20% от получки
recommendation_payment = int(profit * (1 - target_accum) / (base_expence_days + 2 * upper_expence_days))
# Расчет рекомендуемой траты за период для получения 20% от получки
recom_paym_for_per = recommendation_payment * (base_expence_days + 2 * upper_expence_days)
# Расчет рекомендуемой суммы накоплений
recom_capital = profit - recom_paym_for_per
# Расчет рекомендуемых инвестиций
recom_investment = recom_capital * invest_value

# Сравниваем чистую сумму доступных накоплений со значением целевого накопления и минимального целевого накопления
# На основе сравнения выдаем информацию
if 0 < capital <= int(target_capital_MIN): # Если накопления составят менее минимально возможного для цели
    print(f"""
Вы не можете копить деньги

Рекомендовано организовать ежедневные траты на уровне: {recommendation_payment} руб
Тогда Ваши траты за период составят: {recom_paym_for_per} руб
Вы сможете накопить: {recom_capital} руб
Из них инвестировать: {recom_investment} руб
          """)  
elif target_capital_MIN < capital < target_capital: # Если накопления составят меньше поставленной для цели, но больше минимального
    capital = target_capital
    # Выводим расчеты 
    print(f"""
Вы можете накопить: {capital} руб
Из них инвестировать: {investment} руб

Рекомендовано организовать ежедневные траты на уровне: {recommendation_payment} руб
Тогда Ваши ежедневные траты за период составят: {recom_paym_for_per} руб
Вы сможете накопить: {round(recom_capital)} руб
Из них инвестировать: {round(recom_investment)} руб
          """)
elif capital < 0: # Если накопления ушли в минус
    #Расчет затрат в день чтобы выйти в ноль
    # Из целевого расхода за период вычитаем отрицательное накопление (недостаток)
    zero_paym_for_period = (payment_for_period + capital)
    zero_paym_for_day = zero_paym_for_period / (base_expence_days + 2 * upper_expence_days) 
    # Выводим расчеты
    print(f"""
Вы не можете копить деньги
Не хватает: {abs(capital)} руб

Рекомендовано организовать ежедневные траты на уровне: {round(zero_paym_for_day)} руб
Тогда ваши ежедневныетраты за период составят: {round(zero_paym_for_period)} руб
Вы выйдете в ноль, потратите всю сумму: {income} руб
          """)
else: #Если накопления больше целевых значений
    # Выводим расчеты
    print(f"\nВы можете накопить: {round(capital)} руб")
    print(f"Из них инвестировать: {round(investment)} руб")



end = input("\nНажмите Enter чтобы закончить")
